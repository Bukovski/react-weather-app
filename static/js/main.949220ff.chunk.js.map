{"version":3,"sources":["units/icons.js","units/temperatureConvert.js","units/timeConverter.js","units/fetchDataWeather.js","components/geo.component.jsx","components/temperature.component.jsx","components/detail.component.jsx","components/diagram.component.jsx","components/preloader/preloader.component.jsx","app.container.jsx","index.js"],"names":["Icons","iconId","icon","icons","kelvinToC","kelvin","Math","round","dateFromTimestamp","timestamp","date","Date","moment","format","timeFromTimestamp","API_KEY","process","BASE_URL","Geo","props","cityName","className","Temperature","data","actualTemperature","maxTemperature","minTemperature","Detail","weatherDescription","weatherIcon","windSpeed","humidity","pressure","Diagram","temperaturesForecast","temperaturesForecastLabels","loaded","useState","colorBg","setColorBg","colorText","setColorText","colorPrimary","setColorPrimary","setColorSecondary","useEffect","getLinkOnBody","document","body","getCssVarContainer","getComputedStyle","getPropertyValue","diagramOptions","series","name","options","chart","height","type","colors","plotOptions","bar","dataLabels","position","enabled","formatter","val","offsetY","style","fontSize","xaxis","categories","axisBorder","show","axisTicks","tooltip","labels","yaxis","align","Preloader","isLoaded","visible","setVisible","timer","setTimeout","clearTimeout","width","viewBox","points","fill","AppContainer","state","theme","this","getData","prevProps","prevState","snapshot","setAttribute","setState","navigator","geolocation","getCurrentPosition","latitude","longitude","geoCoordinates","currentWeatherUrl","weatherForecastUrl","currentWeatherData","a","fetch","response","json","getDataJson","console","log","main","temp","toFixed","dt","wind","speed","weather","description","toUpperCase","id","error","weatherForecastData","i","Number","list","cloneTemperaturesForecast","sort","pop","shift","Promise","all","then","responses","weatherData","forEach","Object","assign","fetchDataWeather","coords","message","enableHighAccuracy","timeout","maximumAge","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.949220ff.chunk.js","sourcesContent":["import icons from './iconsList.json';\n\nexport default function Icons (iconId) {\n  const prefix = 'wi wi-';\n  let icon = icons[ iconId ].icon;\n  \n  // If we are not in the ranges mentioned above, add a day/night prefix.\n  if (!(iconId > 699 && iconId < 800) && !(iconId > 899 && iconId < 1000)) {\n    icon = 'day-' + icon;\n  }\n  \n  return prefix + icon;\n}\n","// Convert degree Kelvin to degree Celsius\nconst kelvinToC = (kelvin) => Math.round(kelvin - 273);\n\n\nexport {\n  kelvinToC\n}\n","import moment from \"moment\";\n\n\n// Get date from Unix timestamp\nconst dateFromTimestamp = (timestamp) => {\n\tconst date = new Date(timestamp * 1000);\n\treturn moment(date).format(\"ddd, MMMM DD\");\n};\n\n// Get time from Unix timestamp\nconst timeFromTimestamp = (timestamp) => {\n\tconst date = new Date(timestamp * 1000);\n\treturn moment(date).format(\"HH:MM\");\n};\n\n\nexport {\n\tdateFromTimestamp,\n\ttimeFromTimestamp\n}","import Icons from \"./icons\";\nimport { kelvinToC } from \"./temperatureConvert\";\nimport { dateFromTimestamp, timeFromTimestamp } from \"./timeConverter\";\n\n\nconst API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY || \"\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\n\n\nconst fetchDataWeather = (latitude, longitude) => {\n\tconst geoCoordinates = `&lat=${ latitude }&lon=${ longitude }`;\n\tconst currentWeatherUrl = `${ BASE_URL }weather?appid=${ API_KEY }${ geoCoordinates }`;\n\tconst weatherForecastUrl = `${ BASE_URL }forecast?appid=${ API_KEY }${ geoCoordinates }`;\n\t\n\t\n\tconst currentWeatherData = async () => {\n\t\ttry {\n\t\t\tconst response = await fetch(currentWeatherUrl);\n\t\t\tconst getDataJson = await response.json();\n\t\t\t\n\t\t\tconsole.log(\"currentWeatherData ->\", getDataJson);\n\t\t\t\n\t\t\treturn {\n\t\t\t\tactualTemperature: kelvinToC(getDataJson.main.temp).toFixed(0),\n\t\t\t\tdate: dateFromTimestamp(getDataJson.dt),\n\t\t\t\tcityName: getDataJson.name,\n\t\t\t\twindSpeed: getDataJson.wind.speed,\n\t\t\t\thumidity: getDataJson.main.humidity.toFixed(0),\n\t\t\t\tpressure: getDataJson.main.pressure.toFixed(0),\n\t\t\t\tweatherDescription: (getDataJson.weather[ 0 ].description).toUpperCase(),\n\t\t\t\tweatherIcon: Icons(getDataJson.weather[ 0 ].id),\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t}\n\t};\n\t\n\tconst weatherForecastData = async () => {\n\t\ttry {\n\t\t\tconst response = await fetch(weatherForecastUrl)\n\t\t\tconst getDataJson = await response.json();\n\t\t\t\n\t\t\tconsole.log(\"weatherForecastData ->\", getDataJson);\n\t\t\t\n\t\t\tconst temperaturesForecast = [];\n\t\t\tconst temperaturesForecastLabels = [];\n\t\t\t\n\t\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t\ttemperaturesForecast[ i ] = Number(kelvinToC(getDataJson.list[ i ].main.temp).toFixed(1));\n\t\t\t\ttemperaturesForecastLabels[ i ] = timeFromTimestamp(getDataJson.list[ i ].dt);\n\t\t\t}\n\t\t\t\n\t\t\tconst cloneTemperaturesForecast = [ ...temperaturesForecast ].sort();\n\t\t\tconst [ maxTemperature, minTemperature ] = [ cloneTemperaturesForecast.pop(),\t\t\t\tcloneTemperaturesForecast.shift() ]\n\t\t\t\n\t\t\treturn {\n\t\t\t\ttemperaturesForecast,\n\t\t\t\ttemperaturesForecastLabels,\n\t\t\t\tmaxTemperature,\n\t\t\t\tminTemperature,\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t}\n\t}\n\t\n\treturn Promise.all([ currentWeatherData(), weatherForecastData() ])\n\t\t.then((responses) => {\n\t\t\tlet weatherData = {};\n\t\t\t\n\t\t\tresponses.forEach((response) => {\n\t\t\t\tweatherData = Object.assign(weatherData, response);\n\t\t\t});\n\t\t\t\n\t\t\treturn weatherData;\n\t\t});\n};\n\nconst fetchDataWeatherFake = () => {\n\treturn {\n\t\t\"actualTemperature\": \"22\",\n\t\t\"maxTemperature\": 24,\n\t\t\"minTemperature\": 18,\n\t\t\"date\": \"September 12th\",\n\t\t\"cityName\": \"Fake-City\",\n\t\t\"windSpeed\": 3.91,\n\t\t\"humidity\": \"43\",\n\t\t\"pressure\": \"1016\",\n\t\t\"weatherDescription\": \"OVERCAST CLOUDS\",\n\t\t\"weatherIcon\": \"wi wi-day-cloudy\",\n\t\t\"temperaturesForecast\": [ 21, 24, 22, 19, 18 ],\n\t\t\"temperaturesForecastLabels\": [ \"12:09\", \"15:09\", \"18:09\", \"21:09\", \"00:09\" ],\n\t\t\"loaded\": true,\n\t\t\"theme\": \"rainy\"\n\t}\n}\n\n\nexport {\n\tfetchDataWeather,\n\tfetchDataWeatherFake\n}\n","import React from \"react\";\n\n\nconst Geo = (props) => {\n\tconst { cityName, date } = props;\n\t\n\treturn (<div className=\"geo\">\n\t\t<div className=\"geo__location\">\n\t\t\t{ cityName }\n\t\t</div>\n\t\t<div className=\"geo__date\">{ date }</div>\n\t</div>);\n}\n\n\nexport default Geo;\n","import React from \"react\";\n\nconst Temperature = (props) => {\n\tconst { actualTemperature, maxTemperature, minTemperature } = props.data;\n\t\n\treturn (<div className=\"temperature\">\n\t\t<div className=\"temperature__deg\">{ actualTemperature }</div>\n\t\t<div className=\"temperature__wrap\">\n\t\t\t<div className=\"temperature__mesure\">&deg;C</div>\n\t\t\t\n\t\t\t<div className=\"temperature__box\">\n\t\t\t\t<div className=\"temperature__max\">\n\t\t\t\t\t<span className=\"temperature__mark\">{ '\\u2191' }</span>\n\t\t\t\t\t<p className=\"temperature__text\">{ maxTemperature }</p>\n\t\t\t\t\t<span className=\"temperature__unit\">&deg;C</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"temperature__min\">\n\t\t\t\t\t<span className=\"temperature__mark\">{ '\\u2193' }</span>\n\t\t\t\t\t<p className=\"temperature__text\">{ minTemperature }</p>\n\t\t\t\t\t<span className=\"temperature__unit\">&deg;C</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\n\t\t</div>\n\t</div>);\n}\n\n\nexport default Temperature;","import React from \"react\";\n\nconst Detail = (props) => {\n\tconst { weatherDescription, weatherIcon, windSpeed, humidity, pressure } = props.data;\n\t\n\treturn (<div className=\"detail\">\n\t\t<div className=\"detail__wrap\">\n          <span className=\"detail__icon\">\n            <i className={ weatherIcon }/>\n          </span>\n\t\t\t<div className=\"detail__description\">{ weatherDescription }</div>\n\t\t</div>\n\t\t\n\t\t<div className=\"detail__box\">\n\t\t\t<div className=\"detail__indicator\">\n\t\t\t\t<div className=\"detail__info\">\n\t\t\t\t\t{ windSpeed }\n\t\t\t\t\t<span className=\"detail__measure\">m/s</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"detail__name\">wind speed</div>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className=\"detail__indicator\">\n\t\t\t\t<div className=\"detail__info\">\n\t\t\t\t\t{ humidity }\n\t\t\t\t\t<span className=\"detail__measure\">%</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"detail__name\">humidity</div></div>\n\t\t\t\n\t\t\t<div className=\"detail__indicator\">\n\t\t\t\t<div className=\"detail__info\">\n\t\t\t\t\t{ pressure }\n\t\t\t\t\t<span className=\"detail__measure\">hpa</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"detail__name\">pressure</div>\n\t\t\t</div>\n\t\t</div>\n\t\n\t</div>);\n}\n\n\nexport default Detail;","import React, { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\n\n\nconst Diagram = (props) => {\n\tconst { temperaturesForecast, temperaturesForecastLabels, loaded } = props.data;\n\t\n\tconst [ colorBg, setColorBg ] = useState(\"#fff\");\n\tconst [ colorText, setColorText ] = useState(\"#495758\");\n\tconst [ colorPrimary, setColorPrimary ] = useState(\"#1fa69d\");\n\tconst [ colorSecondary, setColorSecondary] = useState(\"rgba(29, 211, 176, 1)\");\n\t\n\t\n\tuseEffect(() => {\n\t\t// read data-theme styles variables from body :root\n\t\tconst getLinkOnBody = document.body;\n\t\tconst getCssVarContainer = getComputedStyle(getLinkOnBody);\n\n\t\tsetColorBg(getCssVarContainer.getPropertyValue('--color-bg'));\n\t\tsetColorText(getCssVarContainer.getPropertyValue('--color-text'));\n\t\tsetColorPrimary(getCssVarContainer.getPropertyValue('--color-primary'));\n\t\tsetColorSecondary(getCssVarContainer.getPropertyValue('--color-secondary'));\n\t}, [ loaded ]);\n\t\n\t\n\tconst diagramOptions = {\n\t\tseries: [{\n\t\t\tname: 'Inflation',\n\t\t\tdata: [ ...temperaturesForecast ]\n\t\t}],\n\t\toptions: {\n\t\t\tchart: {\n\t\t\t\theight: 350,\n\t\t\t\ttype: 'bar',\n\t\t\t},\n\t\t\tcolors: colorPrimary,\n\t\t\tplotOptions: {\n\t\t\t\tbar: {\n\t\t\t\t\tdataLabels: {\n\t\t\t\t\t\tposition: 'center', // top, center, bottom\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\tdataLabels: {\n\t\t\t\tenabled: true,\n\t\t\t\tformatter: function (val) {\n\t\t\t\t\treturn val + \"°C\";\n\t\t\t\t},\n\t\t\t\toffsetY: 10,\n\t\t\t\tstyle: {\n\t\t\t\t\tfontSize: '1.6rem',\n\t\t\t\t\tcolors: [ colorBg ]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\t\t\txaxis: {\n\t\t\t\tcategories: [ ...temperaturesForecastLabels ],\n\t\t\t\tposition: 'bottom',\n\t\t\t\taxisBorder: {\n\t\t\t\t\tshow: true\n\t\t\t\t},\n\t\t\t\taxisTicks: {\n\t\t\t\t\tshow: false\n\t\t\t\t},\n\t\t\t\ttooltip: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t},\n\t\t\t\tlabels: {\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolors: colorText,\n\t\t\t\t\t\tfontSize: '1.5rem'\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\t\t\tyaxis: {\n\t\t\t\taxisBorder: {\n\t\t\t\t\tshow: true\n\t\t\t\t},\n\t\t\t\taxisTicks: {\n\t\t\t\t\tshow: false,\n\t\t\t\t},\n\t\t\t\tlabels: {\n\t\t\t\t\tshow: true,\n\t\t\t\t\talign: 'right',\n\t\t\t\t\tformatter: function (val) {\n\t\t\t\t\t\treturn val + \"°C\";\n\t\t\t\t\t},\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolors: colorText,\n\t\t\t\t\t\tfontSize: '1.5rem'\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t}\n\t\n\treturn (<div className=\"diagram\">\n\t\t<Chart\n\t\t\ttype=\"bar\"\n\t\t\t// height={ 280 }\n\t\t\toptions={ diagramOptions.options }\n\t\t\tseries={diagramOptions.series}\n\t\t/>\n\t</div>);\n}\n\n\nexport default Diagram;","import React, { useEffect, useState } from \"react\";\nimport \"./preloader.style.css\";\n\n\nconst Preloader = (props) => {\n\tconst { isLoaded } = props;\n\t\n\tconst [ visible, setVisible ] = useState(true);\n\t\n\t// remove element after animation is complete\n\tuseEffect(() => {\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetVisible(!visible);\n\t\t}, 1000);\n\t\t\n\t\treturn () => {\n\t\t\tclearTimeout(timer)\n\t\t}\n\t}, [ isLoaded ]);\n\t\n\n\treturn (\n\t\tvisible\n\t\t\t? <div className={ \"preloader \" + (isLoaded ? \"preloader-hidden\" : \"\") }>\n\t\t\t\t<svg width=\"200\" height=\"200\" viewBox=\"0 0 100 100\">\n\t\t\t\t\t<polyline className=\"line-cornered stroke-still\" points=\"0,0 100,0 100,100\" stroke-width=\"10\" fill=\"none\" />\n\t\t\t\t\t<polyline className=\"line-cornered stroke-still\" points=\"0,0 0,100 100,100\" stroke-width=\"10\" fill=\"none\" />\n\t\t\t\t\t<polyline className=\"line-cornered stroke-animation\" points=\"0,0 100,0 100,100\" stroke-width=\"10\" fill=\"none\" />\n\t\t\t\t\t<polyline className=\"line-cornered stroke-animation\" points=\"0,0 0,100 100,100\" stroke-width=\"10\" fill=\"none\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t: null\n\t)\n}\n\n\nexport default Preloader;\n","import React, { Fragment } from \"react\";\n\nimport { fetchDataWeather, fetchDataWeatherFake } from './units/fetchDataWeather'\n\nimport Geo from \"./components/geo.component\";\nimport Temperature from \"./components/temperature.component\";\nimport Detail from \"./components/detail.component\";\nimport Diagram from \"./components/diagram.component\";\nimport Preloader from \"./components/preloader/preloader.component\";\n\n\nclass AppContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      actualTemperature: '0',\n      maxTemperature: '0',\n      minTemperature: '0',\n      date: 'Fri, May 6',\n      cityName: 'City Name',\n      windSpeed: '---',\n      humidity: '--',\n      pressure: '----',\n      weatherDescription: 'clouds',\n      weatherIcon: 'wi wi-day-cloudy',\n      temperaturesForecast: [ -10, -5, 0, 5, 10 ],\n      temperaturesForecastLabels: [ \"09:00\", \"12:00\", \"15:00\", \"18:00\", \"21:00\" ],\n      loaded: false,\n      theme: 'default'\n    };\n  }\n  \n  componentDidMount() {\n    this.getData();\n    // this.getFakeData();\n  }\n  \n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.theme !== this.state.theme) {\n      const getThemeSwitcher = document.body;\n      getThemeSwitcher.setAttribute(\"data-theme\", this.state.theme);\n    }\n  }\n  \n  getFakeData() {\n    setTimeout(() => {\n      this.setState({ ...fetchDataWeatherFake() });\n    }, 1000)\n  }\n  \n  // Fetch the data using the gps coordinates\n  getData() {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        fetchDataWeather(position.coords.latitude, position.coords.longitude)\n          .then((data) => {\n            this.setState({\n              actualTemperature: data.actualTemperature,\n              maxTemperature: data.maxTemperature,\n              minTemperature: data.minTemperature,\n              date: data.date,\n              cityName: data.cityName,\n              windSpeed: data.windSpeed,\n              humidity: data.humidity,\n              pressure: data.pressure,\n              weatherDescription: data.weatherDescription,\n              weatherIcon: data.weatherIcon,\n              temperaturesForecast: data.temperaturesForecast,\n              temperaturesForecastLabels: data.temperaturesForecastLabels,\n              loaded: true\n            });\n          });\n      },\n      (error) => console.error(error.message),\n      {\n        enableHighAccuracy: false,\n        timeout: 20000,\n        maximumAge: 1000\n      }\n    );\n    \n  }\n  \n  render() {\n    const {\n      cityName, date,\n      actualTemperature, maxTemperature, minTemperature,\n      weatherDescription, weatherIcon, windSpeed, humidity, pressure,\n      temperaturesForecast, temperaturesForecastLabels,\n      theme, loaded\n    } = this.state;\n    \n    \n    return (\n      <Fragment>\n        { <Preloader isLoaded={ loaded }/> }\n        \n        <div className=\"main\">\n          <Geo cityName={ cityName } date={ date } />\n          \n          <Temperature data={{ actualTemperature, maxTemperature, minTemperature }} />\n          \n          <Detail data={{ weatherDescription, weatherIcon, windSpeed, humidity, pressure }}/>\n          \n          <Diagram data={{ temperaturesForecast, temperaturesForecastLabels, loaded }}/>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default AppContainer;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './app.container';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// reportWebVitals(console.log);\n"],"sourceRoot":""}